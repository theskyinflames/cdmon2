// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"github.com/theskyinflames/cdmon2/app/config"
	"github.com/theskyinflames/cdmon2/app/domain"
	"sync"
)

var (
	lockServerDomainMockAddHosting    sync.RWMutex
	lockServerDomainMockRemoveHosting sync.RWMutex
	lockServerDomainMockUpdateHosting sync.RWMutex
)

// Ensure, that ServerDomainMock does implement ServerDomain.
// If this is not the case, regenerate this file with moq.
var _ ServerDomain = &ServerDomainMock{}

// ServerDomainMock is a mock implementation of ServerDomain.
//
//     func TestSomethingThatUsesServerDomain(t *testing.T) {
//
//         // make and configure a mocked ServerDomain
//         mockedServerDomain := &ServerDomainMock{
//             AddHostingFunc: func(hosting *domain.Hosting, cfg *config.Config) error {
// 	               panic("mock out the AddHosting method")
//             },
//             RemoveHostingFunc: func(hosting *domain.Hosting) error {
// 	               panic("mock out the RemoveHosting method")
//             },
//             UpdateHostingFunc: func(hosting *domain.Hosting, old *domain.Hosting, cfg *config.Config) error {
// 	               panic("mock out the UpdateHosting method")
//             },
//         }
//
//         // use mockedServerDomain in code that requires ServerDomain
//         // and then make assertions.
//
//     }
type ServerDomainMock struct {
	// AddHostingFunc mocks the AddHosting method.
	AddHostingFunc func(hosting *domain.Hosting, cfg *config.Config) error

	// RemoveHostingFunc mocks the RemoveHosting method.
	RemoveHostingFunc func(hosting *domain.Hosting) error

	// UpdateHostingFunc mocks the UpdateHosting method.
	UpdateHostingFunc func(hosting *domain.Hosting, old *domain.Hosting, cfg *config.Config) error

	// calls tracks calls to the methods.
	calls struct {
		// AddHosting holds details about calls to the AddHosting method.
		AddHosting []struct {
			// Hosting is the hosting argument value.
			Hosting *domain.Hosting
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// RemoveHosting holds details about calls to the RemoveHosting method.
		RemoveHosting []struct {
			// Hosting is the hosting argument value.
			Hosting *domain.Hosting
		}
		// UpdateHosting holds details about calls to the UpdateHosting method.
		UpdateHosting []struct {
			// Hosting is the hosting argument value.
			Hosting *domain.Hosting
			// Old is the old argument value.
			Old *domain.Hosting
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
	}
}

// AddHosting calls AddHostingFunc.
func (mock *ServerDomainMock) AddHosting(hosting *domain.Hosting, cfg *config.Config) error {
	if mock.AddHostingFunc == nil {
		panic("ServerDomainMock.AddHostingFunc: method is nil but ServerDomain.AddHosting was just called")
	}
	callInfo := struct {
		Hosting *domain.Hosting
		Cfg     *config.Config
	}{
		Hosting: hosting,
		Cfg:     cfg,
	}
	lockServerDomainMockAddHosting.Lock()
	mock.calls.AddHosting = append(mock.calls.AddHosting, callInfo)
	lockServerDomainMockAddHosting.Unlock()
	return mock.AddHostingFunc(hosting, cfg)
}

// AddHostingCalls gets all the calls that were made to AddHosting.
// Check the length with:
//     len(mockedServerDomain.AddHostingCalls())
func (mock *ServerDomainMock) AddHostingCalls() []struct {
	Hosting *domain.Hosting
	Cfg     *config.Config
} {
	var calls []struct {
		Hosting *domain.Hosting
		Cfg     *config.Config
	}
	lockServerDomainMockAddHosting.RLock()
	calls = mock.calls.AddHosting
	lockServerDomainMockAddHosting.RUnlock()
	return calls
}

// RemoveHosting calls RemoveHostingFunc.
func (mock *ServerDomainMock) RemoveHosting(hosting *domain.Hosting) error {
	if mock.RemoveHostingFunc == nil {
		panic("ServerDomainMock.RemoveHostingFunc: method is nil but ServerDomain.RemoveHosting was just called")
	}
	callInfo := struct {
		Hosting *domain.Hosting
	}{
		Hosting: hosting,
	}
	lockServerDomainMockRemoveHosting.Lock()
	mock.calls.RemoveHosting = append(mock.calls.RemoveHosting, callInfo)
	lockServerDomainMockRemoveHosting.Unlock()
	return mock.RemoveHostingFunc(hosting)
}

// RemoveHostingCalls gets all the calls that were made to RemoveHosting.
// Check the length with:
//     len(mockedServerDomain.RemoveHostingCalls())
func (mock *ServerDomainMock) RemoveHostingCalls() []struct {
	Hosting *domain.Hosting
} {
	var calls []struct {
		Hosting *domain.Hosting
	}
	lockServerDomainMockRemoveHosting.RLock()
	calls = mock.calls.RemoveHosting
	lockServerDomainMockRemoveHosting.RUnlock()
	return calls
}

// UpdateHosting calls UpdateHostingFunc.
func (mock *ServerDomainMock) UpdateHosting(hosting *domain.Hosting, old *domain.Hosting, cfg *config.Config) error {
	if mock.UpdateHostingFunc == nil {
		panic("ServerDomainMock.UpdateHostingFunc: method is nil but ServerDomain.UpdateHosting was just called")
	}
	callInfo := struct {
		Hosting *domain.Hosting
		Old     *domain.Hosting
		Cfg     *config.Config
	}{
		Hosting: hosting,
		Old:     old,
		Cfg:     cfg,
	}
	lockServerDomainMockUpdateHosting.Lock()
	mock.calls.UpdateHosting = append(mock.calls.UpdateHosting, callInfo)
	lockServerDomainMockUpdateHosting.Unlock()
	return mock.UpdateHostingFunc(hosting, old, cfg)
}

// UpdateHostingCalls gets all the calls that were made to UpdateHosting.
// Check the length with:
//     len(mockedServerDomain.UpdateHostingCalls())
func (mock *ServerDomainMock) UpdateHostingCalls() []struct {
	Hosting *domain.Hosting
	Old     *domain.Hosting
	Cfg     *config.Config
} {
	var calls []struct {
		Hosting *domain.Hosting
		Old     *domain.Hosting
		Cfg     *config.Config
	}
	lockServerDomainMockUpdateHosting.RLock()
	calls = mock.calls.UpdateHosting
	lockServerDomainMockUpdateHosting.RUnlock()
	return calls
}
