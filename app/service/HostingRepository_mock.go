// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"github.com/theskyinflames/cdmon2/app/domain"
	"sync"
)

var (
	lockHostingRepositoryMockGet    sync.RWMutex
	lockHostingRepositoryMockGetAll sync.RWMutex
	lockHostingRepositoryMockInsert sync.RWMutex
	lockHostingRepositoryMockRemove sync.RWMutex
	lockHostingRepositoryMockUpdate sync.RWMutex
)

// Ensure, that HostingRepositoryMock does implement HostingRepository.
// If this is not the case, regenerate this file with moq.
var _ HostingRepository = &HostingRepositoryMock{}

// HostingRepositoryMock is a mock implementation of HostingRepository.
//
//     func TestSomethingThatUsesHostingRepository(t *testing.T) {
//
//         // make and configure a mocked HostingRepository
//         mockedHostingRepository := &HostingRepositoryMock{
//             GetFunc: func(uuid domain.UUID) (*domain.Hosting, error) {
// 	               panic("mock out the Get method")
//             },
//             GetAllFunc: func() ([]domain.Hosting, error) {
// 	               panic("mock out the GetAll method")
//             },
//             InsertFunc: func(hosting *domain.Hosting) error {
// 	               panic("mock out the Insert method")
//             },
//             RemoveFunc: func(uuid domain.UUID) (*domain.Hosting, error) {
// 	               panic("mock out the Remove method")
//             },
//             UpdateFunc: func(hosting *domain.Hosting) error {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedHostingRepository in code that requires HostingRepository
//         // and then make assertions.
//
//     }
type HostingRepositoryMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(uuid domain.UUID) (*domain.Hosting, error)

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func() ([]domain.Hosting, error)

	// InsertFunc mocks the Insert method.
	InsertFunc func(hosting *domain.Hosting) error

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(uuid domain.UUID) (*domain.Hosting, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(hosting *domain.Hosting) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// UUID is the uuid argument value.
			UUID domain.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Hosting is the hosting argument value.
			Hosting *domain.Hosting
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// UUID is the uuid argument value.
			UUID domain.UUID
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Hosting is the hosting argument value.
			Hosting *domain.Hosting
		}
	}
}

// Get calls GetFunc.
func (mock *HostingRepositoryMock) Get(uuid domain.UUID) (*domain.Hosting, error) {
	if mock.GetFunc == nil {
		panic("HostingRepositoryMock.GetFunc: method is nil but HostingRepository.Get was just called")
	}
	callInfo := struct {
		UUID domain.UUID
	}{
		UUID: uuid,
	}
	lockHostingRepositoryMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockHostingRepositoryMockGet.Unlock()
	return mock.GetFunc(uuid)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedHostingRepository.GetCalls())
func (mock *HostingRepositoryMock) GetCalls() []struct {
	UUID domain.UUID
} {
	var calls []struct {
		UUID domain.UUID
	}
	lockHostingRepositoryMockGet.RLock()
	calls = mock.calls.Get
	lockHostingRepositoryMockGet.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *HostingRepositoryMock) GetAll() ([]domain.Hosting, error) {
	if mock.GetAllFunc == nil {
		panic("HostingRepositoryMock.GetAllFunc: method is nil but HostingRepository.GetAll was just called")
	}
	callInfo := struct {
	}{}
	lockHostingRepositoryMockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	lockHostingRepositoryMockGetAll.Unlock()
	return mock.GetAllFunc()
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedHostingRepository.GetAllCalls())
func (mock *HostingRepositoryMock) GetAllCalls() []struct {
} {
	var calls []struct {
	}
	lockHostingRepositoryMockGetAll.RLock()
	calls = mock.calls.GetAll
	lockHostingRepositoryMockGetAll.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *HostingRepositoryMock) Insert(hosting *domain.Hosting) error {
	if mock.InsertFunc == nil {
		panic("HostingRepositoryMock.InsertFunc: method is nil but HostingRepository.Insert was just called")
	}
	callInfo := struct {
		Hosting *domain.Hosting
	}{
		Hosting: hosting,
	}
	lockHostingRepositoryMockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	lockHostingRepositoryMockInsert.Unlock()
	return mock.InsertFunc(hosting)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedHostingRepository.InsertCalls())
func (mock *HostingRepositoryMock) InsertCalls() []struct {
	Hosting *domain.Hosting
} {
	var calls []struct {
		Hosting *domain.Hosting
	}
	lockHostingRepositoryMockInsert.RLock()
	calls = mock.calls.Insert
	lockHostingRepositoryMockInsert.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *HostingRepositoryMock) Remove(uuid domain.UUID) (*domain.Hosting, error) {
	if mock.RemoveFunc == nil {
		panic("HostingRepositoryMock.RemoveFunc: method is nil but HostingRepository.Remove was just called")
	}
	callInfo := struct {
		UUID domain.UUID
	}{
		UUID: uuid,
	}
	lockHostingRepositoryMockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	lockHostingRepositoryMockRemove.Unlock()
	return mock.RemoveFunc(uuid)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedHostingRepository.RemoveCalls())
func (mock *HostingRepositoryMock) RemoveCalls() []struct {
	UUID domain.UUID
} {
	var calls []struct {
		UUID domain.UUID
	}
	lockHostingRepositoryMockRemove.RLock()
	calls = mock.calls.Remove
	lockHostingRepositoryMockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *HostingRepositoryMock) Update(hosting *domain.Hosting) error {
	if mock.UpdateFunc == nil {
		panic("HostingRepositoryMock.UpdateFunc: method is nil but HostingRepository.Update was just called")
	}
	callInfo := struct {
		Hosting *domain.Hosting
	}{
		Hosting: hosting,
	}
	lockHostingRepositoryMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockHostingRepositoryMockUpdate.Unlock()
	return mock.UpdateFunc(hosting)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedHostingRepository.UpdateCalls())
func (mock *HostingRepositoryMock) UpdateCalls() []struct {
	Hosting *domain.Hosting
} {
	var calls []struct {
		Hosting *domain.Hosting
	}
	lockHostingRepositoryMockUpdate.RLock()
	calls = mock.calls.Update
	lockHostingRepositoryMockUpdate.RUnlock()
	return calls
}
